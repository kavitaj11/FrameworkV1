<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="5" failed="1" total="26" passed="20">
  <reporter-output>
  </reporter-output>
  <suite name="CollectiveSuite" duration-ms="630250" started-at="2016-02-09T20:40:08Z" finished-at="2016-02-09T20:50:39Z">
    <groups>
    </groups>
    <test name="SmokeTesting" duration-ms="630250" started-at="2016-02-09T20:40:08Z" finished-at="2016-02-09T20:50:39Z">
      <class name="org.collective.testmethods.CollectiveSanityTestCustomer">
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForLogin" is-config="true" duration-ms="28" started-at="2016-02-10T02:13:30Z" finished-at="2016-02-10T02:13:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="setUp" is-config="true" duration-ms="1061" started-at="2016-02-10T02:13:30Z" finished-at="2016-02-10T02:13:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="startRecording" is-config="true" duration-ms="12" started-at="2016-02-10T02:13:31Z" finished-at="2016-02-10T02:13:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.collective.testmethods.CollectiveSanityTestCustomer.tc001_collective_signup() throws java.io.IOException,java.lang.InterruptedException,java.awt.AWTException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="PASS" signature="tc001_collective_signup()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="tc001_collective_signup" duration-ms="4175" started-at="2016-02-10T02:13:31Z" finished-at="2016-02-10T02:13:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc001_collective_signup -->
        <test-method status="PASS" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="callStopRecording" is-config="true" duration-ms="76" started-at="2016-02-10T02:13:35Z" finished-at="2016-02-10T02:13:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="PASS" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForAdminLogout" is-config="true" duration-ms="28" started-at="2016-02-10T02:13:35Z" finished-at="2016-02-10T02:13:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForLogin" is-config="true" duration-ms="1776" started-at="2016-02-10T02:13:36Z" finished-at="2016-02-10T02:13:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="PASS" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:13:36Z" finished-at="2016-02-10T02:13:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=tc001_collective_signup status=SUCCESS method=CollectiveSanityTestCustomer.tc001_collective_signup()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="setUp" is-config="true" duration-ms="1331" started-at="2016-02-10T02:13:37Z" finished-at="2016-02-10T02:13:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="startRecording" is-config="true" duration-ms="16" started-at="2016-02-10T02:13:39Z" finished-at="2016-02-10T02:13:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.collective.testmethods.CollectiveSanityTestCustomer.tc002_collective_login() throws java.lang.InterruptedException,java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="PASS" signature="tc002_collective_login()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="tc002_collective_login" duration-ms="3222" started-at="2016-02-10T02:13:39Z" finished-at="2016-02-10T02:13:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc002_collective_login -->
        <test-method status="PASS" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="callStopRecording" is-config="true" duration-ms="65" started-at="2016-02-10T02:13:42Z" finished-at="2016-02-10T02:13:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="PASS" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForAdminLogout" is-config="true" duration-ms="20024" started-at="2016-02-10T02:13:42Z" finished-at="2016-02-10T02:14:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="PASS" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="takeScreenshot" is-config="true" duration-ms="2" started-at="2016-02-10T02:14:02Z" finished-at="2016-02-10T02:14:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=tc002_collective_login status=SUCCESS method=CollectiveSanityTestCustomer.tc002_collective_login()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForLogin" is-config="true" duration-ms="1539" started-at="2016-02-10T02:14:02Z" finished-at="2016-02-10T02:14:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="setUp" is-config="true" duration-ms="1522" started-at="2016-02-10T02:14:03Z" finished-at="2016-02-10T02:14:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="startRecording" is-config="true" duration-ms="18" started-at="2016-02-10T02:14:05Z" finished-at="2016-02-10T02:14:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.collective.testmethods.CollectiveSanityTestCustomer.tc003_collective_blog()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="PASS" signature="tc003_collective_blog()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="tc003_collective_blog" duration-ms="2659" started-at="2016-02-10T02:14:05Z" finished-at="2016-02-10T02:14:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc003_collective_blog -->
        <test-method status="PASS" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="callStopRecording" is-config="true" duration-ms="107" started-at="2016-02-10T02:14:08Z" finished-at="2016-02-10T02:14:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="PASS" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForAdminLogout" is-config="true" duration-ms="20018" started-at="2016-02-10T02:14:08Z" finished-at="2016-02-10T02:14:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="PASS" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="takeScreenshot" is-config="true" duration-ms="1" started-at="2016-02-10T02:14:28Z" finished-at="2016-02-10T02:14:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=tc003_collective_blog status=SUCCESS method=CollectiveSanityTestCustomer.tc003_collective_blog()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForLogin" is-config="true" duration-ms="20024" started-at="2016-02-10T02:14:28Z" finished-at="2016-02-10T02:14:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="setUp" is-config="true" duration-ms="1395" started-at="2016-02-10T02:14:48Z" finished-at="2016-02-10T02:14:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="startRecording" is-config="true" duration-ms="12" started-at="2016-02-10T02:14:49Z" finished-at="2016-02-10T02:14:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.collective.testmethods.CollectiveSanityTestCustomer.tc004_collective_accessories()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="PASS" signature="tc004_collective_accessories()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="tc004_collective_accessories" duration-ms="1972" started-at="2016-02-10T02:14:49Z" finished-at="2016-02-10T02:14:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc004_collective_accessories -->
        <test-method status="PASS" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="callStopRecording" is-config="true" duration-ms="103" started-at="2016-02-10T02:14:51Z" finished-at="2016-02-10T02:14:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="PASS" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForAdminLogout" is-config="true" duration-ms="20049" started-at="2016-02-10T02:14:51Z" finished-at="2016-02-10T02:15:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="PASS" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:15:11Z" finished-at="2016-02-10T02:15:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=tc004_collective_accessories status=SUCCESS method=CollectiveSanityTestCustomer.tc004_collective_accessories()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForLogin" is-config="true" duration-ms="20024" started-at="2016-02-10T02:15:11Z" finished-at="2016-02-10T02:15:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="setUp" is-config="true" duration-ms="1355" started-at="2016-02-10T02:15:31Z" finished-at="2016-02-10T02:15:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="startRecording" is-config="true" duration-ms="13" started-at="2016-02-10T02:15:33Z" finished-at="2016-02-10T02:15:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.collective.testmethods.CollectiveSanityTestCustomer.tc005_collective_accessories_Filter_Brand()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="PASS" signature="tc005_collective_accessories_Filter_Brand()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="tc005_collective_accessories_Filter_Brand" duration-ms="3000" started-at="2016-02-10T02:15:33Z" finished-at="2016-02-10T02:15:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc005_collective_accessories_Filter_Brand -->
        <test-method status="PASS" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="callStopRecording" is-config="true" duration-ms="87" started-at="2016-02-10T02:15:36Z" finished-at="2016-02-10T02:15:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="PASS" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForAdminLogout" is-config="true" duration-ms="20067" started-at="2016-02-10T02:15:36Z" finished-at="2016-02-10T02:15:56Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="PASS" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:15:56Z" finished-at="2016-02-10T02:15:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=tc005_collective_accessories_Filter_Brand status=SUCCESS method=CollectiveSanityTestCustomer.tc005_collective_accessories_Filter_Brand()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForLogin" is-config="true" duration-ms="20037" started-at="2016-02-10T02:15:56Z" finished-at="2016-02-10T02:16:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="setUp" is-config="true" duration-ms="1577" started-at="2016-02-10T02:16:16Z" finished-at="2016-02-10T02:16:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="startRecording" is-config="true" duration-ms="14" started-at="2016-02-10T02:16:18Z" finished-at="2016-02-10T02:16:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.collective.testmethods.CollectiveSanityTestCustomer.tc006_collective_pagination()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="PASS" signature="tc006_collective_pagination()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="tc006_collective_pagination" duration-ms="124763" started-at="2016-02-10T02:16:18Z" finished-at="2016-02-10T02:18:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc006_collective_pagination -->
        <test-method status="PASS" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="callStopRecording" is-config="true" duration-ms="160" started-at="2016-02-10T02:18:22Z" finished-at="2016-02-10T02:18:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="PASS" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForAdminLogout" is-config="true" duration-ms="6603" started-at="2016-02-10T02:18:22Z" finished-at="2016-02-10T02:18:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="PASS" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:29Z" finished-at="2016-02-10T02:18:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=tc006_collective_pagination status=SUCCESS method=CollectiveSanityTestCustomer.tc006_collective_pagination()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForLogin" is-config="true" duration-ms="2013" started-at="2016-02-10T02:18:29Z" finished-at="2016-02-10T02:18:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="FAIL" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="setUp" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:31Z" finished-at="2016-02-10T02:18:31Z">
          <exception class="org.openqa.selenium.WebDriverException">
            <message>
              <![CDATA[chrome not reachable
  (Session info: chrome=48.0.2564.103)
  (Driver info: chromedriver=2.20.353145 (343b531d31eeb933ec778dbcf7081628a1396067),platform=Windows NT 6.3 x86_64) (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 2.01 seconds
Build info: version: '2.44.0', revision: '76d78cf323ce037c5f92db6c1bba601c2ac43ad8', time: '2014-10-23 13:11:40'
System info: host: 'codebrahma', ip: '192.168.56.1', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '1.8.0_60'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities [{applicationCacheEnabled=false, rotatable=false, mobileEmulationEnabled=false, chrome={userDataDir=C:\Users\codeb\AppData\Local\Temp\scoped_dir6072_22713}, takesHeapSnapshot=true, databaseEnabled=false, handlesAlerts=true, hasTouchScreen=false, version=48.0.2564.103, platform=WIN8_1, browserConnectionEnabled=false, nativeEvents=true, acceptSslCerts=true, locationContextEnabled=true, webStorageEnabled=true, browserName=chrome, takesScreenshot=true, javascriptEnabled=true, cssSelectorsEnabled=true}]
Session ID: a412f8e81d3f8024726b120d668c4e07]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.WebDriverException: chrome not reachable
  (Session info: chrome=48.0.2564.103)
  (Driver info: chromedriver=2.20.353145 (343b531d31eeb933ec778dbcf7081628a1396067),platform=Windows NT 6.3 x86_64) (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 2.01 seconds
Build info: version: '2.44.0', revision: '76d78cf323ce037c5f92db6c1bba601c2ac43ad8', time: '2014-10-23 13:11:40'
System info: host: 'codebrahma', ip: '192.168.56.1', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '1.8.0_60'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities [{applicationCacheEnabled=false, rotatable=false, mobileEmulationEnabled=false, chrome={userDataDir=C:\Users\codeb\AppData\Local\Temp\scoped_dir6072_22713}, takesHeapSnapshot=true, databaseEnabled=false, handlesAlerts=true, hasTouchScreen=false, version=48.0.2564.103, platform=WIN8_1, browserConnectionEnabled=false, nativeEvents=true, acceptSslCerts=true, locationContextEnabled=true, webStorageEnabled=true, browserName=chrome, takesScreenshot=true, javascriptEnabled=true, cssSelectorsEnabled=true}]
Session ID: a412f8e81d3f8024726b120d668c4e07
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:204)
	at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:156)
	at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:599)
	at org.openqa.selenium.remote.RemoteWebDriver.get(RemoteWebDriver.java:304)
	at org.collective.maincontroller.MainController.setUp(MainController.java:88)
	at sun.reflect.GeneratedMethodAccessor10.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:510)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:211)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:585)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:773)
	at org.testng.TestRunner.run(TestRunner.java:623)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
	at org.testng.TestNG.run(TestNG.java:1018)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.WebDriverException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="SKIP" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="startRecording" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="SKIP" signature="tc007_collective_sales()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="tc007_collective_sales" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc007_collective_sales -->
        <test-method status="SKIP" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="callStopRecording" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="SKIP" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="SKIP" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForAdminLogout" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="SKIP" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="setUp" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="SKIP" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForLogin" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="SKIP" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="startRecording" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="SKIP" signature="tc008_collective_orderGreaterThan20000()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="tc008_collective_orderGreaterThan20000" duration-ms="1" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc008_collective_orderGreaterThan20000 -->
        <test-method status="SKIP" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForAdminLogout" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="SKIP" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="callStopRecording" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="SKIP" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="SKIP" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForLogin" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="SKIP" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="setUp" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="SKIP" signature="tc009_collective_orderLessOrEqualThan20000()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="tc009_collective_orderLessOrEqualThan20000" duration-ms="1" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc009_collective_orderLessOrEqualThan20000 -->
        <test-method status="SKIP" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="startRecording" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="SKIP" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="callStopRecording" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="SKIP" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForAdminLogout" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="SKIP" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="SKIP" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForLogin" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="SKIP" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="startRecording" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="SKIP" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="setUp" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="SKIP" signature="tc010_collective_orderPlacement()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="tc010_collective_orderPlacement" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc010_collective_orderPlacement -->
        <test-method status="SKIP" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="callStopRecording" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="SKIP" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForAdminLogout" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="SKIP" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="SKIP" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForLogin" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="SKIP" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="startRecording" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="SKIP" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="setUp" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="SKIP" signature="tc011_collective_placeorder_OrderCancellation()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="tc011_collective_placeorder_OrderCancellation" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc011_collective_placeorder_OrderCancellation -->
        <test-method status="SKIP" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="callStopRecording" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="SKIP" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="checkForAdminLogout" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="SKIP" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestCustomer@2f943d71]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:18:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
      </class> <!-- org.collective.testmethods.CollectiveSanityTestCustomer -->
      <class name="org.collective.testmethods.CollectiveSanityTestURL">
        <test-method status="FAIL" signature="tc023_PageURLsStaging()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestURL@80503]" name="tc023_PageURLsStaging" duration-ms="125340" started-at="2016-02-10T02:18:33Z" finished-at="2016-02-10T02:20:39Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[/static_pages/press failed  with status 500
/store_locator failed  with status 500
/static_pages/shippingpolicy failed  with status 500
/static_pages/about failed  with status 500
/events failed  with status 500
/static_pages/privacypolicy failed  with status 500
/prive failed  with status 500
/static_pages/faqs failed  with status 500
/static_pages/returnpolicy failed  with status 500
/static_pages/careers failed  with status 500
 expected [/static_pages/press failed  with status 500
/store_locator failed  with status 500
/static_pages/shippingpolicy failed  with status 500
/static_pages/about failed  with status 500
/events failed  with status 500
/static_pages/privacypolicy failed  with status 500
/prive failed  with status 500
/static_pages/faqs failed  with status 500
/static_pages/returnpolicy failed  with status 500
/static_pages/careers failed  with status 500
] but found []]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: /static_pages/press failed  with status 500
/store_locator failed  with status 500
/static_pages/shippingpolicy failed  with status 500
/static_pages/about failed  with status 500
/events failed  with status 500
/static_pages/privacypolicy failed  with status 500
/prive failed  with status 500
/static_pages/faqs failed  with status 500
/static_pages/returnpolicy failed  with status 500
/static_pages/careers failed  with status 500
 expected [/static_pages/press failed  with status 500
/store_locator failed  with status 500
/static_pages/shippingpolicy failed  with status 500
/static_pages/about failed  with status 500
/events failed  with status 500
/static_pages/privacypolicy failed  with status 500
/prive failed  with status 500
/static_pages/faqs failed  with status 500
/static_pages/returnpolicy failed  with status 500
/static_pages/careers failed  with status 500
] but found []
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertEquals(Assert.java:125)
	at org.testng.Assert.assertEquals(Assert.java:178)
	at org.collective.testmethods.CollectiveSanityTestURL.tc023_PageURLsStaging(CollectiveSanityTestURL.java:21)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:773)
	at org.testng.TestRunner.run(TestRunner.java:623)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
	at org.testng.TestNG.run(TestNG.java:1018)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc023_PageURLsStaging -->
      </class> <!-- org.collective.testmethods.CollectiveSanityTestURL -->
      <class name="org.collective.testmethods.CollectiveSanityTestAdmin">
        <test-method status="PASS" signature="beforeSuite()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="beforeSuite" is-config="true" duration-ms="54" started-at="2016-02-10T02:10:08Z" finished-at="2016-02-10T02:10:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="beforeTest" is-config="true" duration-ms="2230" started-at="2016-02-10T02:10:08Z" finished-at="2016-02-10T02:10:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForLogin" is-config="true" duration-ms="94" started-at="2016-02-10T02:10:11Z" finished-at="2016-02-10T02:10:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="setUp" is-config="true" duration-ms="4539" started-at="2016-02-10T02:10:11Z" finished-at="2016-02-10T02:10:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="startRecording" is-config="true" duration-ms="169" started-at="2016-02-10T02:10:15Z" finished-at="2016-02-10T02:10:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.collective.testmethods.CollectiveSanityTestAdmin.tc012_collective_adminLogin() throws java.io.IOException,java.lang.InterruptedException,java.awt.AWTException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="PASS" signature="tc012_collective_adminLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="tc012_collective_adminLogin" duration-ms="4795" started-at="2016-02-10T02:10:15Z" finished-at="2016-02-10T02:10:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc012_collective_adminLogin -->
        <test-method status="PASS" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="callStopRecording" is-config="true" duration-ms="81" started-at="2016-02-10T02:10:20Z" finished-at="2016-02-10T02:10:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="PASS" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForAdminLogout" is-config="true" duration-ms="2317" started-at="2016-02-10T02:10:20Z" finished-at="2016-02-10T02:10:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="PASS" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:10:23Z" finished-at="2016-02-10T02:10:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=tc012_collective_adminLogin status=SUCCESS method=CollectiveSanityTestAdmin.tc012_collective_adminLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForLogin" is-config="true" duration-ms="29" started-at="2016-02-10T02:10:23Z" finished-at="2016-02-10T02:10:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="setUp" is-config="true" duration-ms="1140" started-at="2016-02-10T02:10:23Z" finished-at="2016-02-10T02:10:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="startRecording" is-config="true" duration-ms="21" started-at="2016-02-10T02:10:24Z" finished-at="2016-02-10T02:10:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.collective.testmethods.CollectiveSanityTestAdmin.tc013_collective_admin_reports_OrderTotalsSheet() throws java.lang.InterruptedException,java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="PASS" signature="tc013_collective_admin_reports_OrderTotalsSheet()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="tc013_collective_admin_reports_OrderTotalsSheet" duration-ms="11283" started-at="2016-02-10T02:10:24Z" finished-at="2016-02-10T02:10:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc013_collective_admin_reports_OrderTotalsSheet -->
        <test-method status="PASS" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="callStopRecording" is-config="true" duration-ms="142" started-at="2016-02-10T02:10:35Z" finished-at="2016-02-10T02:10:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="PASS" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForAdminLogout" is-config="true" duration-ms="1538" started-at="2016-02-10T02:10:35Z" finished-at="2016-02-10T02:10:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="PASS" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:10:37Z" finished-at="2016-02-10T02:10:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=tc013_collective_admin_reports_OrderTotalsSheet status=SUCCESS method=CollectiveSanityTestAdmin.tc013_collective_admin_reports_OrderTotalsSheet()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForLogin" is-config="true" duration-ms="30" started-at="2016-02-10T02:10:37Z" finished-at="2016-02-10T02:10:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="setUp" is-config="true" duration-ms="1092" started-at="2016-02-10T02:10:37Z" finished-at="2016-02-10T02:10:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="startRecording" is-config="true" duration-ms="25" started-at="2016-02-10T02:10:38Z" finished-at="2016-02-10T02:10:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.collective.testmethods.CollectiveSanityTestAdmin.tc014_evaluateAdminTabs_Returns() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="PASS" signature="tc014_evaluateAdminTabs_Returns()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="tc014_evaluateAdminTabs_Returns" duration-ms="7097" started-at="2016-02-10T02:10:38Z" finished-at="2016-02-10T02:10:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc014_evaluateAdminTabs_Returns -->
        <test-method status="PASS" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="callStopRecording" is-config="true" duration-ms="103" started-at="2016-02-10T02:10:45Z" finished-at="2016-02-10T02:10:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="PASS" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForAdminLogout" is-config="true" duration-ms="1367" started-at="2016-02-10T02:10:45Z" finished-at="2016-02-10T02:10:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="PASS" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:10:46Z" finished-at="2016-02-10T02:10:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=tc014_evaluateAdminTabs_Returns status=SUCCESS method=CollectiveSanityTestAdmin.tc014_evaluateAdminTabs_Returns()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForLogin" is-config="true" duration-ms="29" started-at="2016-02-10T02:10:46Z" finished-at="2016-02-10T02:10:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="setUp" is-config="true" duration-ms="1303" started-at="2016-02-10T02:10:46Z" finished-at="2016-02-10T02:10:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="startRecording" is-config="true" duration-ms="14" started-at="2016-02-10T02:10:48Z" finished-at="2016-02-10T02:10:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.collective.testmethods.CollectiveSanityTestAdmin.tc015_evaluateAdminTabs_Carousel() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="PASS" signature="tc015_evaluateAdminTabs_Carousel()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="tc015_evaluateAdminTabs_Carousel" duration-ms="5314" started-at="2016-02-10T02:10:48Z" finished-at="2016-02-10T02:10:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc015_evaluateAdminTabs_Carousel -->
        <test-method status="PASS" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="callStopRecording" is-config="true" duration-ms="99" started-at="2016-02-10T02:10:53Z" finished-at="2016-02-10T02:10:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="PASS" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForAdminLogout" is-config="true" duration-ms="1403" started-at="2016-02-10T02:10:53Z" finished-at="2016-02-10T02:10:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="PASS" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:10:55Z" finished-at="2016-02-10T02:10:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=tc015_evaluateAdminTabs_Carousel status=SUCCESS method=CollectiveSanityTestAdmin.tc015_evaluateAdminTabs_Carousel()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForLogin" is-config="true" duration-ms="30" started-at="2016-02-10T02:10:55Z" finished-at="2016-02-10T02:10:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="setUp" is-config="true" duration-ms="962" started-at="2016-02-10T02:10:55Z" finished-at="2016-02-10T02:10:56Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="startRecording" is-config="true" duration-ms="10" started-at="2016-02-10T02:10:56Z" finished-at="2016-02-10T02:10:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.collective.testmethods.CollectiveSanityTestAdmin.tc016_evaluateAdminTabs_Orders() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="PASS" signature="tc016_evaluateAdminTabs_Orders()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="tc016_evaluateAdminTabs_Orders" duration-ms="6531" started-at="2016-02-10T02:10:56Z" finished-at="2016-02-10T02:11:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc016_evaluateAdminTabs_Orders -->
        <test-method status="PASS" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="callStopRecording" is-config="true" duration-ms="189" started-at="2016-02-10T02:11:02Z" finished-at="2016-02-10T02:11:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="PASS" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForAdminLogout" is-config="true" duration-ms="1426" started-at="2016-02-10T02:11:02Z" finished-at="2016-02-10T02:11:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="PASS" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="takeScreenshot" is-config="true" duration-ms="1" started-at="2016-02-10T02:11:04Z" finished-at="2016-02-10T02:11:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=tc016_evaluateAdminTabs_Orders status=SUCCESS method=CollectiveSanityTestAdmin.tc016_evaluateAdminTabs_Orders()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForLogin" is-config="true" duration-ms="42" started-at="2016-02-10T02:11:04Z" finished-at="2016-02-10T02:11:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="setUp" is-config="true" duration-ms="960" started-at="2016-02-10T02:11:04Z" finished-at="2016-02-10T02:11:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="startRecording" is-config="true" duration-ms="10" started-at="2016-02-10T02:11:05Z" finished-at="2016-02-10T02:11:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.collective.testmethods.CollectiveSanityTestAdmin.tc017_evaluateAdminTabs_Products() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="PASS" signature="tc017_evaluateAdminTabs_Products()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="tc017_evaluateAdminTabs_Products" duration-ms="5962" started-at="2016-02-10T02:11:05Z" finished-at="2016-02-10T02:11:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc017_evaluateAdminTabs_Products -->
        <test-method status="PASS" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="callStopRecording" is-config="true" duration-ms="83" started-at="2016-02-10T02:11:11Z" finished-at="2016-02-10T02:11:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="PASS" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForAdminLogout" is-config="true" duration-ms="3243" started-at="2016-02-10T02:11:11Z" finished-at="2016-02-10T02:11:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="PASS" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:11:14Z" finished-at="2016-02-10T02:11:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=tc017_evaluateAdminTabs_Products status=SUCCESS method=CollectiveSanityTestAdmin.tc017_evaluateAdminTabs_Products()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForLogin" is-config="true" duration-ms="28" started-at="2016-02-10T02:11:14Z" finished-at="2016-02-10T02:11:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="setUp" is-config="true" duration-ms="1120" started-at="2016-02-10T02:11:14Z" finished-at="2016-02-10T02:11:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="startRecording" is-config="true" duration-ms="17" started-at="2016-02-10T02:11:15Z" finished-at="2016-02-10T02:11:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.collective.testmethods.CollectiveSanityTestAdmin.tc018_evaluateAdminTabs_Settings() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="PASS" signature="tc018_evaluateAdminTabs_Settings()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="tc018_evaluateAdminTabs_Settings" duration-ms="6454" started-at="2016-02-10T02:11:15Z" finished-at="2016-02-10T02:11:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc018_evaluateAdminTabs_Settings -->
        <test-method status="PASS" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="callStopRecording" is-config="true" duration-ms="72" started-at="2016-02-10T02:11:22Z" finished-at="2016-02-10T02:11:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="PASS" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForAdminLogout" is-config="true" duration-ms="1497" started-at="2016-02-10T02:11:22Z" finished-at="2016-02-10T02:11:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForLogin" is-config="true" duration-ms="28" started-at="2016-02-10T02:11:23Z" finished-at="2016-02-10T02:11:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="PASS" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:11:23Z" finished-at="2016-02-10T02:11:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=tc018_evaluateAdminTabs_Settings status=SUCCESS method=CollectiveSanityTestAdmin.tc018_evaluateAdminTabs_Settings()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="setUp" is-config="true" duration-ms="1221" started-at="2016-02-10T02:11:23Z" finished-at="2016-02-10T02:11:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="startRecording" is-config="true" duration-ms="11" started-at="2016-02-10T02:11:25Z" finished-at="2016-02-10T02:11:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.collective.testmethods.CollectiveSanityTestAdmin.tc019_evaluateAdminTabs_Promotions() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="PASS" signature="tc019_evaluateAdminTabs_Promotions()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="tc019_evaluateAdminTabs_Promotions" duration-ms="6161" started-at="2016-02-10T02:11:25Z" finished-at="2016-02-10T02:11:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc019_evaluateAdminTabs_Promotions -->
        <test-method status="PASS" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="callStopRecording" is-config="true" duration-ms="74" started-at="2016-02-10T02:11:31Z" finished-at="2016-02-10T02:11:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="PASS" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForAdminLogout" is-config="true" duration-ms="1578" started-at="2016-02-10T02:11:31Z" finished-at="2016-02-10T02:11:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="PASS" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:11:32Z" finished-at="2016-02-10T02:11:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=tc019_evaluateAdminTabs_Promotions status=SUCCESS method=CollectiveSanityTestAdmin.tc019_evaluateAdminTabs_Promotions()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForLogin" is-config="true" duration-ms="32" started-at="2016-02-10T02:11:32Z" finished-at="2016-02-10T02:11:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="setUp" is-config="true" duration-ms="20327" started-at="2016-02-10T02:11:32Z" finished-at="2016-02-10T02:11:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="startRecording" is-config="true" duration-ms="8" started-at="2016-02-10T02:11:53Z" finished-at="2016-02-10T02:11:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.collective.testmethods.CollectiveSanityTestAdmin.tc020_evaluateAdminTabs_Users() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="PASS" signature="tc020_evaluateAdminTabs_Users()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="tc020_evaluateAdminTabs_Users" duration-ms="5316" started-at="2016-02-10T02:11:53Z" finished-at="2016-02-10T02:11:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc020_evaluateAdminTabs_Users -->
        <test-method status="PASS" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="callStopRecording" is-config="true" duration-ms="95" started-at="2016-02-10T02:11:58Z" finished-at="2016-02-10T02:11:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="PASS" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForAdminLogout" is-config="true" duration-ms="1403" started-at="2016-02-10T02:11:58Z" finished-at="2016-02-10T02:12:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="PASS" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:12:00Z" finished-at="2016-02-10T02:12:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=tc020_evaluateAdminTabs_Users status=SUCCESS method=CollectiveSanityTestAdmin.tc020_evaluateAdminTabs_Users()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForLogin" is-config="true" duration-ms="33" started-at="2016-02-10T02:12:00Z" finished-at="2016-02-10T02:12:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="setUp" is-config="true" duration-ms="1119" started-at="2016-02-10T02:12:00Z" finished-at="2016-02-10T02:12:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="startRecording" is-config="true" duration-ms="15" started-at="2016-02-10T02:12:01Z" finished-at="2016-02-10T02:12:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.collective.testmethods.CollectiveSanityTestAdmin.tc021_evaluateAdminTabs_Blog() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="PASS" signature="tc021_evaluateAdminTabs_Blog()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="tc021_evaluateAdminTabs_Blog" duration-ms="5318" started-at="2016-02-10T02:12:01Z" finished-at="2016-02-10T02:12:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc021_evaluateAdminTabs_Blog -->
        <test-method status="PASS" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="callStopRecording" is-config="true" duration-ms="82" started-at="2016-02-10T02:12:06Z" finished-at="2016-02-10T02:12:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="PASS" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForAdminLogout" is-config="true" duration-ms="1704" started-at="2016-02-10T02:12:06Z" finished-at="2016-02-10T02:12:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="PASS" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:12:08Z" finished-at="2016-02-10T02:12:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=tc021_evaluateAdminTabs_Blog status=SUCCESS method=CollectiveSanityTestAdmin.tc021_evaluateAdminTabs_Blog()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForLogin" is-config="true" duration-ms="33" started-at="2016-02-10T02:12:08Z" finished-at="2016-02-10T02:12:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="setUp" is-config="true" duration-ms="993" started-at="2016-02-10T02:12:08Z" finished-at="2016-02-10T02:12:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="startRecording" is-config="true" duration-ms="16" started-at="2016-02-10T02:12:09Z" finished-at="2016-02-10T02:12:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.collective.testmethods.CollectiveSanityTestAdmin.tc022_evaluateAdminTabs_Store() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="PASS" signature="tc022_evaluateAdminTabs_Store()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="tc022_evaluateAdminTabs_Store" duration-ms="5413" started-at="2016-02-10T02:12:09Z" finished-at="2016-02-10T02:12:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc022_evaluateAdminTabs_Store -->
        <test-method status="PASS" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="callStopRecording" is-config="true" duration-ms="95" started-at="2016-02-10T02:12:14Z" finished-at="2016-02-10T02:12:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="PASS" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForAdminLogout" is-config="true" duration-ms="1739" started-at="2016-02-10T02:12:14Z" finished-at="2016-02-10T02:12:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="PASS" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="takeScreenshot" is-config="true" duration-ms="1" started-at="2016-02-10T02:12:16Z" finished-at="2016-02-10T02:12:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=tc022_evaluateAdminTabs_Store status=SUCCESS method=CollectiveSanityTestAdmin.tc022_evaluateAdminTabs_Store()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForLogin" is-config="true" duration-ms="30" started-at="2016-02-10T02:12:16Z" finished-at="2016-02-10T02:12:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="setUp" is-config="true" duration-ms="1068" started-at="2016-02-10T02:12:16Z" finished-at="2016-02-10T02:12:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="startRecording" is-config="true" duration-ms="15" started-at="2016-02-10T02:12:17Z" finished-at="2016-02-10T02:12:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.collective.testmethods.CollectiveSanityTestAdmin.tc023_evaluateAdminTabs_AnalyticScript() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="PASS" signature="tc023_evaluateAdminTabs_AnalyticScript()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="tc023_evaluateAdminTabs_AnalyticScript" duration-ms="12347" started-at="2016-02-10T02:12:17Z" finished-at="2016-02-10T02:12:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc023_evaluateAdminTabs_AnalyticScript -->
        <test-method status="PASS" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="callStopRecording" is-config="true" duration-ms="95" started-at="2016-02-10T02:12:30Z" finished-at="2016-02-10T02:12:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="PASS" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForAdminLogout" is-config="true" duration-ms="1849" started-at="2016-02-10T02:12:30Z" finished-at="2016-02-10T02:12:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="PASS" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:12:31Z" finished-at="2016-02-10T02:12:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=tc023_evaluateAdminTabs_AnalyticScript status=SUCCESS method=CollectiveSanityTestAdmin.tc023_evaluateAdminTabs_AnalyticScript()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForLogin" is-config="true" duration-ms="31" started-at="2016-02-10T02:12:31Z" finished-at="2016-02-10T02:12:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="setUp" is-config="true" duration-ms="1096" started-at="2016-02-10T02:12:32Z" finished-at="2016-02-10T02:12:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="startRecording" is-config="true" duration-ms="11" started-at="2016-02-10T02:12:33Z" finished-at="2016-02-10T02:12:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.collective.testmethods.CollectiveSanityTestAdmin.tc024_Reports_UserList() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="PASS" signature="tc024_Reports_UserList()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="tc024_Reports_UserList" duration-ms="9439" started-at="2016-02-10T02:12:33Z" finished-at="2016-02-10T02:12:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc024_Reports_UserList -->
        <test-method status="PASS" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="callStopRecording" is-config="true" duration-ms="84" started-at="2016-02-10T02:12:42Z" finished-at="2016-02-10T02:12:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="PASS" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForAdminLogout" is-config="true" duration-ms="29332" started-at="2016-02-10T02:12:42Z" finished-at="2016-02-10T02:13:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="PASS" signature="checkForLogin()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForLogin" is-config="true" duration-ms="29" started-at="2016-02-10T02:13:11Z" finished-at="2016-02-10T02:13:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForLogin -->
        <test-method status="PASS" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:13:11Z" finished-at="2016-02-10T02:13:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=tc024_Reports_UserList status=SUCCESS method=CollectiveSanityTestAdmin.tc024_Reports_UserList()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="setUp" is-config="true" duration-ms="1124" started-at="2016-02-10T02:13:12Z" finished-at="2016-02-10T02:13:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startRecording(java.lang.reflect.Method)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="startRecording" is-config="true" duration-ms="23" started-at="2016-02-10T02:13:13Z" finished-at="2016-02-10T02:13:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.collective.testmethods.CollectiveSanityTestAdmin.tc025_Reports_returnList() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRecording -->
        <test-method status="PASS" signature="tc025_Reports_returnList()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="tc025_Reports_returnList" duration-ms="15518" started-at="2016-02-10T02:13:13Z" finished-at="2016-02-10T02:13:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tc025_Reports_returnList -->
        <test-method status="PASS" signature="callStopRecording()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="callStopRecording" is-config="true" duration-ms="132" started-at="2016-02-10T02:13:28Z" finished-at="2016-02-10T02:13:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callStopRecording -->
        <test-method status="PASS" signature="checkForAdminLogout()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="checkForAdminLogout" is-config="true" duration-ms="1805" started-at="2016-02-10T02:13:28Z" finished-at="2016-02-10T02:13:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkForAdminLogout -->
        <test-method status="PASS" signature="takeScreenshot(org.testng.ITestResult)[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="takeScreenshot" is-config="true" duration-ms="0" started-at="2016-02-10T02:13:30Z" finished-at="2016-02-10T02:13:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=tc025_Reports_returnList status=SUCCESS method=CollectiveSanityTestAdmin.tc025_Reports_returnList()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshot -->
        <test-method status="SKIP" signature="tearDownClass()[pri:0, instance:org.collective.testmethods.CollectiveSanityTestAdmin@5faeada1]" name="tearDownClass" is-config="true" duration-ms="0" started-at="2016-02-10T02:20:39Z" finished-at="2016-02-10T02:20:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownClass -->
      </class> <!-- org.collective.testmethods.CollectiveSanityTestAdmin -->
    </test> <!-- SmokeTesting -->
  </suite> <!-- CollectiveSuite -->
</testng-results>
